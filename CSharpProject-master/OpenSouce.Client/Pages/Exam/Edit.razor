@page "/exams/edit/{examId:int}"
@inject HttpClient HttpClient

@inject NavigationManager NavigationManager
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
<h1>Edit Exam</h1>

@if (exam == null || users == null)
{
    <p>Loading...</p>
}
else
{
    <form @onsubmit="HandleSubmit">
        <div class="form-group">
            <label for="examName">Exam Name</label>
            <input type="text" class="form-control" id="examName" @bind="exam.ExamName" required>
        </div>
        <div class="form-group">
            <label for="startTime">Start Time</label>
            <input type="datetime-local" class="form-control" id="startTime" @bind="exam.StartTime" required>
        </div>
        <div class="form-group">
            <label for="endTime">End Time</label>
            <input type="datetime-local" class="form-control" id="endTime" @bind="exam.EndTime" required>
        </div>
        <div class="form-group">
            <label for="createdBy">Created By:</label>
            <select id="createdBy" class="form-control" @bind="exam.CreatedBy">
                @foreach (var user in users)
                {
                    <option value="@user.UserId" selected="@(user.UserId == exam.CreatedBy)">@user.Username</option>
                }
            </select>
        </div>
        <button type="submit" class="btn btn-primary">Save Changes</button>
    </form>
}

@code {

    [Parameter]
    public int ExamId { get; set; }

    private Exam exam;
    private List<User> users = new List<User>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var examResponse = await HttpClient.GetFromJsonAsync<Exam>($"api/exam/{ExamId}");
            exam = examResponse;

            var usersResponse = await HttpClient.GetFromJsonAsync<List<User>>("api/user");
            users = usersResponse;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching exam or users: {ex.Message}");
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            var response = await HttpClient.PutAsJsonAsync($"api/exam/{exam.ExamId}", exam);
            response.EnsureSuccessStatusCode();

            NavigationManager.NavigateTo("/exams");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating exam: {ex.Message}");
        }
    }
}
